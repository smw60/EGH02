@model EGH01DB.RGEContext
@using EGH01DB.Objects;
@using EGH01DB.Primitives;
@using EGH01.Models.EGHRGE;
@{

    EGH01DB.RGEContext rge = (EGH01DB.RGEContext)Model;
    ChoiceRiskObjectViewContext context = (ChoiceRiskObjectViewContext)Model.GetViewContext("_ChoiceRiskObject");
    if (context == null) { Model.SaveViewContext("_ChoiceRiskObject", context = new ChoiceRiskObjectViewContext()); };


}

<head>
    <link rel="stylesheet" href="https://openlayers.org/en/v4.4.2/css/ol.css" type="text/css">
    <!--<script src="https://code.jquery.com/jquery-1.11.2.js" integrity="sha256-WMJwNbei5YnfOX5dfgVCS5C4waqvc+/0fV7W2uy3DyU=" crossorigin="anonymous"></script>
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css" integrity="sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u" crossorigin="anonymous">
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js" integrity="sha384-Tc5IQib027qvyjSMfHjOMaLkfuWVxZxUPnCJA7l2mCWNIpG9mGCD8wGNIcPD7Txa" crossorigin="anonymous"></script>-->
    <script src="https://cdn.polyfill.io/v2/polyfill.min.js?features=requestAnimationFrame,Element.prototype.classList,URL"></script>
    <script src="https://openlayers.org/en/v4.4.2/build/ol.js"></script>
</head>

@using (Html.BeginForm("Forecast", "EGHRGE"))
{

    <fieldset form="ChoiseRiskObject">
        <legend> Географическая точка </legend>
        @if (context.Regim == ChoiceRiskObjectViewContext.REGIM.INIT)
        {
            {
                <div class="box">
                    <form></form>

                    <div class="row">


                        <div id="map" class="map"></div>
                        <div id="mouse-position"></div>
                        <form id="options-form">

                            <div class="form-inline">
                                <select name="geom-type" id="type" style="display:none">
                                    <option value="Point"></option>
                                </select>
                            </div>
                        </form>
                    </div>


                    <div class="boxdata">
                        <p>
                            <label class="boxdata-label-20">Широта</label>
                            <input readonly class="boxdata-input-10" type="text" id="Latitude" name="ChoiceRiskObject.Latitude" value="@ViewData["Latitude"]" />&deg;
                            <input readonly class="boxdata-input-10" type="text" id="Lat_m" name="ChoiceRiskObject.Lat_m" value="@ViewData["Lat_m"]" />&acute;
                            <input readonly class="boxdata-input-10" type="text" id="Lat_s" name="ChoiceRiskObject.Lat_s" value="@ViewData["Lat_s"]" />&quot;
                        </p>
                       
                        <p>
                            <label class="boxdata-label-20">Долгота</label>
                            <input readonly class="boxdata-input-10" type="text" id="Lngitude" name="ChoiceRiskObject.Lngitude" value="@ViewData["Lngitude"]" />&deg;
                            <input readonly class="boxdata-input-10" type="text" id="Lng_m" name="ChoiceRiskObject.Lng_m" value="@ViewData["Lng_m"]" />&acute;
                            <input readonly class="boxdata-input-10" type="text" id="Lng_s" name="ChoiceRiskObject.Lng_s" value="@ViewData["Lng_s"]" />&quot;

                        </p>
                    </div>


                    <div id="buttons">
                        <div class="box">

                            <button id="clear" class="Очистить" title="Очистить"></button>
                            <span id="result"></span>
                            <input type="hidden" id="coords" value="27,54">
                            <button type="button" class="Центр" title="Центр" value="Центр" onclick="centerMap()"></button>
                        </div>
                    </div>
                    <canvas class="ol-unselectable" width="1000" height="5" style="width: 100%; height: 100%;"></canvas>

                </div>
                        <script type="text/javascript">

                            var raster = new ol.layer.Tile({
                                source: new ol.source.OSM(),
                                name: 'OSM'
                            });
                            var vector = new ol.layer.Vector({
                                source: new ol.source.Vector({
                                }),
                                style: new ol.style.Style({
                                    fill: new ol.style.Fill({
                                        color: 'rgba(255, 255, 255, 0.2)'
                                    }),
                                    stroke: new ol.style.Stroke({
                                        color: '#ffcc33',
                                        width: 2
                                    }),
                                    image: new ol.style.Circle({
                                        radius: 7,
                                        fill: new ol.style.Fill({
                                            color: '#ffcc33'
                                        })
                                    })
                                })
                            });

                            var layers1 = new ol.layer.Tile({
                                source: new ol.source.TileWMS({
                                    url: 'http://195.50.2.82:8080/geoserver/EGH/wms?',
                                    params: {
                                        'LAYERS': 'EGH:RegionMap',
                                        'VERSION': '1.1.1',
                                        'FORMAT': 'image/png',
                                        'TILED': true
                                    },
                                    serverType: 'geoserver'
                                })
                            });
                            var layers2 = new ol.layer.Tile({
                                source: new ol.source.TileWMS({
                                    url: 'http://195.50.2.82:8080/geoserver/EGH/wms?',
                                    params: {
                                        'LAYERS': 'EGH:EcoLocalPolyMap',
                                        'VERSION': '1.1.1',
                                        'FORMAT': 'image/png',
                                        'TILED': true
                                    },
                                    visible: false,
                                    serverType: 'geoserver'
                                })
                            });

                            var layers3 = new ol.layer.Tile({
                                source: new ol.source.TileWMS({
                                    url: 'http://195.50.2.82:8080/geoserver/EGH/wms?',
                                    params: {
                                        'LAYERS': 'EGH:EcoRepublicPolyMap',
                                        'VERSION': '1.1.1',
                                        'FORMAT': 'image/png',
                                        'TILED': true
                                    },
                                    serverType: 'geoserver'
                                })
                            });

                            var layers = [raster, layers1, layers2, layers3, vector];
                            var myFormat = function (dgts) {
                                return (
                                    function (coord1) {
                                        var coord2 = [coord1[1], coord1[0]];
                                        return ol.coordinate.toStringHDMS(coord2, dgts);
                                    });
                            }
                            var mousePositionControl = new ol.control.MousePosition({
                                coordinateFormat: myFormat(0),
                                projection: 'EPSG:4326',
                                className: 'custom-mouse-position',
                                target: document.getElementById('mouse-position'),
                                undefinedHTML: '&nbsp;'
                            });
                            var scaleLineControl = new ol.control.ScaleLine();
                            var view = new ol.View({
                                center: [3200000, 7100000],
                                zoom: 6.8
                            })
                            var map = new ol.Map({
                                controls: ol.control.defaults({
                                    attributionOptions:
                                    ({
                                        collapsible: false
                                    }),
                                }).extend([mousePositionControl, scaleLineControl]),
                                layers: layers,
                                target: 'map',
                                view: view

                            });

                            function hideLayer(layerName) {
                                layerName.setVisible(false);
                            }

                            function toggleLayer(layerName) {
                                if (layerName.getVisible() == true) {
                                    layerName.setVisible(false);
                                } else {
                                    layerName.setVisible(true);
                                }
                            }

                            map.on('click', function (evt) {
                                var coordinate = evt.coordinate;
                                var template = '{x}';
                                var hdms = ol.coordinate.format(ol.proj.transform(coordinate, 'EPSG:3857', 'EPSG:4326'), template, 4);
                                var res = "";
                                var template = '{y}';
                                document.getElementById('Latitude').value = deg_to_dms(hdms);
                
                                document.getElementById('Lat_m').value = deg_to_dmsm(hdms);
                                document.getElementById('Lat_s').value = deg_to_dmss(hdms);
                                var hdms2 = ol.coordinate.format(ol.proj.transform(coordinate, 'EPSG:3857', 'EPSG:4326'), template, 4);
                                document.getElementById('Lngitude').value = deg_to_dms(hdms2);
                                document.getElementById('Lng_m').value = deg_to_dmsm(hdms2);
                                document.getElementById('Lng_s').value = deg_to_dmss(hdms2);
                            });





                            function deg_to_dms(hdms) {
                                var d = Math.floor(hdms);
                                var minfloat = (hdms - d) * 60;
                                var m = Math.floor(minfloat);
                                var secfloat = (minfloat - m) * 60;
                                var s = Math.round(secfloat);
                                if (s == 60) {
                                    m++;
                                    s = 0;
                                }
                                if (m == 60) {
                                    d++;
                                    m = 0;
                                }
                                return (d);
                            }
                            function deg_to_dmsm(hdms) {
                                var d = Math.floor(hdms);
                                var minfloat = (hdms - d) * 60;
                                var m = Math.floor(minfloat);
                                var secfloat = (minfloat - m) * 60;
                                var s = Math.round(secfloat);
                                if (s == 60) {
                                    m++;
                                    s = 0;
                                }
                                if (m == 60) {
                                    d++;
                                    m = 0;
                                }
                                return (m);
                            }
                            function deg_to_dmss(hdms) {
                                var d = Math.floor(hdms);
                                var minfloat = (hdms - d) * 60;
                                var m = Math.floor(minfloat);
                                var secfloat = (minfloat - m) * 60;
                                var s = Math.round(secfloat);
                                if (s == 60) {
                                    m++;
                                    s = 0;
                                }
                                if (m == 60) {
                                    d++;
                                    m = 0;
                                }
                                return (s);
                            }
                            function centerMap() {
                                var lonlat = document.getElementById('coords').value;
                                var lonlat1 = lonlat.split(",");
                                var lonlat2 = lonlat.split(",").map(Number);

                                map.getView().setCenter(ol.proj.transform(lonlat2, 'EPSG:4326', 'EPSG:3857'));
                                map.getView().setZoom(7.0);
                            }
                            var Modify = {
                                init: function () {
                                    this.select = new ol.interaction.Select();
                                    map.addInteraction(this.select);

                                    this.modify = new ol.interaction.Modify({
                                        features: this.select.getFeatures()
                                    });
                                    map.addInteraction(this.modify);

                                    this.setEvents();
                                },
                                setEvents: function () {
                                    var selectedFeatures = this.select.getFeatures();

                                    this.select.on('change:active', function () {
                                        selectedFeatures.forEach(selectedFeatures.remove, selectedFeatures);
                                    });
                                },
                                setActive: function (active) {
                                    this.select.setActive(active);
                                    this.modify.setActive(active);
                                }
                            };
                            Modify.init();

                            var optionsForm = document.getElementById('options-form');

                            var Draw = {
                                init: function () {
                                    map.addInteraction(this.Point);
                                    this.Point.setActive(false);


                                },
                                Point: new ol.interaction.Draw({
                                    source: vector.getSource(),
                                    type: ('Point'),

                                }),

                                getActive: function () {
                                    return this.activeType ? this[this.activeType].getActive() : false;
                                },
                                setActive: function (active) {
                                    var type = optionsForm.elements['geom-type'].value;
                                    if (active) {
                                        this.activeType && this[this.activeType].setActive(false);
                                        this[type].setActive(true);
                                        this.activeType = type;
                                    } else {
                                        this.activeType && this[this.activeType].setActive(false);
                                        this.activeType = null;
                                    }
                                }
                            };
                            Draw.init();

                            optionsForm.onchange = function (e) {
                                var type = e.target.getAttribute('name');
                                var value = e.target.value;
                                if (type == 'geom-type') {
                                    Draw.getActive() && Draw.setActive(true);
                                } else if (type == 'interaction') {
                                    if (value == 'modify') {
                                        Draw.setActive(false);
                                        Modify.setActive(true);
                                    } else if (value == 'draw') {
                                        Draw.setActive(true);
                                        Modify.setActive(false);
                                    }
                                }
                            };

                            Draw.setActive(true);
                            Modify.setActive(false);

                            var snap = new ol.interaction.Snap({
                                source: vector.getSource()
                            });
                            map.addInteraction(snap);


                            var clearButton = document.getElementById('clear');
                            clearButton.addEventListener('click', function (event) {
                                vector.getSource().clear();

                            });

                        </script>
                Model.SaveViewContext("_ChoiceRiskObject", context = new ChoiceRiskObjectViewContext());
            }
            <button type="submit" name="ChoiceRiskObject.choicefind" value="geopchoice">Подтвердить координаты</button>

        }
        else if (context.Regim == ChoiceRiskObjectViewContext.REGIM.CHOICE)
        {


            <h3>Введеные координаты:</h3>
            var Latitude = context.Latitude;
            var Lat_m = context.Lat_m;
            var Lat_s = context.Lat_s;

            var Lngitude = context.Lngitude;
            var Lng_m = context.Lng_m;
            var Lng_s = context.Lng_s;
            <div class="boxdata">
                <p>
                    <label class="boxdata-label-20">Широта</label>
                    <input readonly class="boxdata-input-10" type="text" id="Latitude" name="Latitude" value="@Latitude" />&deg;
                    <input readonly class="boxdata-input-10" type="text" id="Lat_m" name="Lat_m" value="@Lat_m" />&acute;
                    <input readonly class="boxdata-input-10" type="text" id="Lat_s" name="Lat_s" value="@Lat_s" />&quot;
                </p>

                <p>
                    <label class="boxdata-label-20">Долгота</label>
                    <input readonly class="boxdata-input-10" type="text" id="Lngitude" name="Lngitude" value="@Lngitude" />&deg;
                    <input readonly class="boxdata-input-10" type="text" id="Lng_m" name="Lng_m" value="@Lng_m" />&acute;
                    <input readonly class="boxdata-input-10" type="text" id="Lng_s" name="Lng_s" value="@Lng_s" />&quot;

                </p>
            </div>


            <button type="submit" name="ChoiceRiskObject.choicefind" value="geopinit">Повторить поиск </button>
        }
        else if (context.Regim == ChoiceRiskObjectViewContext.REGIM.SET)
        {

            <h3>SET</h3>
            <button type="submit" name="ChoiceRiskObject.choicefind" value="geopinit">Повторить поиск </button>
        }

    </fieldset>



}